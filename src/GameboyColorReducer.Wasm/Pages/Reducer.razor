@page "/reducer"
@inject IJSRuntime JS

<h1>Gameboy Color Reducer</h1>

<div class="container text-center">
    <div class="row">
        <div class="col">
            <h2>Original Image</h2>
            <label for="file-input" class="drop-area" @ref="dropAreaElem">
                <span id="drop-text">Drag your Gameboy Color image here</span>
                <img class="preview-container" @ref="previewImageElem" />
            </label>
            <InputFile id="file-input" @ref="inputFile" OnChange="Process" style="display: none;" />           
        </div>
    </div>
    <div class="row">
        <div class="col">
            <h2>Tile Reducer</h2>
            <img class="preview-container" @ref="tileReducedElem" />
        </div>
        <div class="col">
            <h2>Art Reducer</h2>
            <img class="preview-container" @ref="artReducedElem" />
        </div>
    </div>
</div>

<script>
    window.initializeDropArea = (dropArea, fileInput) => {
        // Utility function to prevent default browser behavior
        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        // Preventing default browser behavior when dragging a file over the container
        dropArea.addEventListener('dragover', preventDefaults);
        dropArea.addEventListener('dragenter', preventDefaults);
        dropArea.addEventListener('dragleave', preventDefaults);

        // Handling dropping files into the area
        dropArea.addEventListener('drop', handleDrop);

        function handleDrop(e) {
            preventDefaults(e);
            const dt = e.dataTransfer;
            const files = dt.files;
            fileInput.files = files;
            fileInput.dispatchEvent(new Event('change'));
        }

        dropArea.addEventListener('dragover', () => {
            dropArea.classList.add('drag-over');
        });

        dropArea.addEventListener('dragleave', () => {
            dropArea.classList.remove('drag-over');
        });

        window.setupPreviewImage = (inputElem, imgElem) => {
            const dropText = document.getElementById('drop-text');
            dropText.style.display = 'none';

            window.setImageSrc(inputElem, imgElem);
        }

        window.setImageSrc = (imgElem, src) => {

            imgElem.src = src;
        };
    }
</script>

@code {
    private InputFile? inputFile;
    private ElementReference previewImageElem;
    private ElementReference dropAreaElem;
    private ElementReference tileReducedElem;
    private ElementReference artReducedElem;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeDropArea", dropAreaElem, inputFile!.Element);
        }
    }

    private async Task Process(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);   

        var base64String = Convert.ToBase64String(buffer);
        var imageDataUrl = $"data:image/png;base64,{base64String}";
        
        await JS.InvokeVoidAsync("setImageSrc", tileReducedElem, imageDataUrl);
        await JS.InvokeVoidAsync("setImageSrc", artReducedElem, imageDataUrl);
        await JS.InvokeVoidAsync("setupPreviewImage", previewImageElem, imageDataUrl);
    }
}
