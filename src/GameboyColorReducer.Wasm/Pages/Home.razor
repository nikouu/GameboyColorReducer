@page "/"
@using GameboyColorReducer.Core
@using GameboyColorReducer.Core.Models;
@using GameboyColorReducer.Core.ImageConverters
@inject IJSRuntime JS

<h1>Gameboy Color Reducer</h1>
<p>Drag and drop your Gameboy Color image to reduce the number of colours to the original Gameboy Color palette.</p>

<div class="container">
    <div id="original-image-container">
        <h2>Original Image</h2>
        <label for="file-input" class="drop-area" @ref="dropAreaElem">
            <span id="drop-text">Drag your Gameboy Color image here</span>
            <img class="preview-container" @ref="previewImageElem" />
        </label>
        <InputFile id="file-input" @ref="inputFile" OnChange="Process" accept=".png" style="display: none;" />
        <div>
            <p class="example-text">Examples</p>
            <div class="example-buttons">
                <button class="example-button left" @onclick="@(() => LoadExampleImage("img/LinksAwakeningDXIntro.png"))">Links Awakening DX intro</button>
                <button class="example-button middle" @onclick="@(() => LoadExampleImage("img/ZeldaOracleOfSeasonsTitleScreenFull.png"))">Oracle of Seasons title screen</button>
                <button class="example-button right" @onclick="@(() => LoadExampleImage("img/PokemonCrystalCeruleanCity.png"))">GSC Cerulean City</button>
            </div>
        </div>
    </div>
    <div id="error-container" class="error-container" style="@(string.IsNullOrEmpty(errorMessage) ? "display: none;" : "display: block;")">
        @errorMessage
    </div>
</div>
<div id="output-container">
    <div class="reducer-container">
        <h2>Tile Reducer</h2>
        <p style="margin-top:0px">Best suited for tilesets</p>
        <div class="image-wrapper">
            <a id="tileReducedLink" target="_blank">
                <img class="preview-container" id="tileReduced" @ref="tileReducedElem" />
            </a>
            <button class="download-button" onclick="downloadImage('tileReduced', 'tile')" style="display: none;">Download</button>
        </div>
    </div>
    <div class="reducer-container">
        <h2>Art Reducer</h2>
        <p style="margin-top:0px">Best suited for art or cutscene stills</p>
        <div class="image-wrapper">
            <a id="artReducedLink" target="_blank">
                <img class="preview-container" id="artReduced" @ref="artReducedElem" />
            </a>
            <button class="download-button" onclick="downloadImage('artReduced', 'art')" style="display: none;">Download</button>
        </div>
    </div>
</div>
<div style="text-align: left;">
    <h2>How does this work?</h2>
    <p>
        <ul>
            <li>Your image is processed in-browser by two different algorithms to quantize/reduce the colours.</li>
            <li>The <strong>Tile Reducer</strong> algorithm quantizes the colours per 8x8 tile and is best suited for tilesets.</li>
            <li>The <strong>Art Reducer</strong> algorithm quantizes the colours to the original Gameboy Color palette and is best suited for art or cutscene stills.</li>
        </ul>
    </p>
    <p>Read more about it on <a href="https://github.com/nikouu/GameboyColorReducer" target="_blank">GitHub</a>.</p>
</div>

<script>
    window.initializeDropArea = (dropArea, fileInput) => {
        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        dropArea.addEventListener('dragover', preventDefaults);
        dropArea.addEventListener('dragenter', preventDefaults);
        dropArea.addEventListener('dragleave', preventDefaults);

        dropArea.addEventListener('drop', handleDrop);

        function handleDrop(e) {
            preventDefaults(e);
            const dt = e.dataTransfer;
            const files = dt.files;
            fileInput.files = files;
            fileInput.dispatchEvent(new Event('change'));
        }

        dropArea.addEventListener('dragover', () => {
            dropArea.classList.add('drag-over');
        });

        dropArea.addEventListener('dragleave', () => {
            dropArea.classList.remove('drag-over');
        });
    }

    window.setupPreviewImage = (inputElem, imgElem) => {
        const dropText = document.getElementById('drop-text');
        dropText.style.display = 'none';

        window.setImageSrc(inputElem, imgElem);
    }

    window.setImageSrc = (imgElem, src) => {
        imgElem.src = src;
        const linkElem = imgElem.parentElement;
        if (linkElem && linkElem.tagName === 'A') {
            // Convert base64 to Blob
            const byteString = atob(src.split(',')[1]);
            const mimeString = src.split(',')[0].split(':')[1].split(';')[0];
            const ab = new ArrayBuffer(byteString.length);
            const ia = new Uint8Array(ab);
            for (let i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }
            const blob = new Blob([ab], { type: mimeString });
            const blobUrl = URL.createObjectURL(blob);
            linkElem.href = blobUrl;
        }
        showDownloadButton(imgElem);
    };

    window.showDownloadButton = (imgElem) => {
        const wrapper = imgElem.closest('.image-wrapper');
        if (wrapper) {
            const button = wrapper.querySelector('.download-button');
            if (button) {
                button.style.display = 'block';
            }
        }
    };

    window.hideDownloadButtons = () => {
        const buttons = document.querySelectorAll('.download-button');
        buttons.forEach(button => {
            button.style.display = 'none';
        });
    };

    window.downloadImage = (elemRef, suffix) => {
        const imgElem = document.getElementById(elemRef);
        const fileInput = document.getElementById('file-input');
        if (imgElem && fileInput && fileInput.files.length > 0) {
            const originalFilename = fileInput.files[0].name;
            const dotIndex = originalFilename.lastIndexOf('.');
            const filename = dotIndex !== -1
                ? `${originalFilename.substring(0, dotIndex)}-${suffix}${originalFilename.substring(dotIndex)}`
                : `${originalFilename}-${suffix}`;

            const link = document.createElement('a');
            link.href = imgElem.src;
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    }

    window.loadExampleImage = async (fileInput, imageUrl) => {
        const response = await fetch(imageUrl);
        const blob = await response.blob();
        const file = new File([blob], imageUrl.split('/').pop(), { type: blob.type });
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        fileInput.files = dataTransfer.files;
        fileInput.dispatchEvent(new Event('change'));
    }

</script>

@code {
    private InputFile? inputFile;
    private ElementReference previewImageElem;
    private ElementReference dropAreaElem;
    private ElementReference tileReducedElem;
    private ElementReference artReducedElem;
    private ImageSharpImageConverter imageSharpImageConverter;
    private ColourReducer colourReducer;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        imageSharpImageConverter = new ImageSharpImageConverter();
        colourReducer = new ColourReducer();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeDropArea", dropAreaElem, inputFile!.Element);
        }
    }

    private async Task Process(InputFileChangeEventArgs e)
    {
        try
        {
            errorMessage = string.Empty;
            var file = e.File;
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize: 1024000).ReadAsync(buffer);

            await JS.InvokeVoidAsync("setupPreviewImage", previewImageElem, GetDataUrl(buffer));

            var image = await Task.Run(() => imageSharpImageConverter.ToWorkingImage(buffer));

            var tileReducedTask = Task.Run(() =>
            {
                var tileImage = imageSharpImageConverter.ToWorkingImage(buffer);
                colourReducer.QuantizePerTile(tileImage);
                var tileReduced = imageSharpImageConverter.ToByteArray(tileImage);
                return tileReduced;
            });

            var artReducedTask = Task.Run(() =>
            {
                var artImage = imageSharpImageConverter.ToWorkingImage(buffer);
                colourReducer.QuantizeToGameBoyPalette(artImage);
                var artReduced = imageSharpImageConverter.ToByteArray(artImage);
                return artReduced;
            });

            await Task.WhenAll(tileReducedTask, artReducedTask);

            var tileReduced = await tileReducedTask;
            var artReduced = await artReducedTask;

            await InvokeAsync(() => JS.InvokeVoidAsync("setImageSrc", tileReducedElem, GetDataUrl(tileReduced)));
            await InvokeAsync(() => JS.InvokeVoidAsync("setImageSrc", artReducedElem, GetDataUrl(artReduced)));
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            await ClearPreviewContainers();
            await HideDownloadButtons();
            await InvokeAsync(StateHasChanged);
            Console.WriteLine(ex);
        }
    }

    private string GetDataUrl(byte[] buffer)
    {
        var base64String = Convert.ToBase64String(buffer);
        var imageDataUrl = $"data:image/png;base64,{base64String}";
        return imageDataUrl;
    }

    private async Task ClearPreviewContainers()
    {
        await JS.InvokeVoidAsync("setImageSrc", tileReducedElem, "");
        await JS.InvokeVoidAsync("setImageSrc", artReducedElem, "");
    }

    private async Task HideDownloadButtons()
    {
        await JS.InvokeVoidAsync("hideDownloadButtons");
    }

    private async Task LoadExampleImage(string imageUrl)
    {
        await JS.InvokeVoidAsync("loadExampleImage", inputFile!.Element, imageUrl);
    }
}
